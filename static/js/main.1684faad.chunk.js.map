{"version":3,"sources":["store/index.ts","api.js","App.tsx","index.tsx"],"names":["getSortedTodos","todos","sortField","sortedTodos","sort","a","b","user","localeCompare","setTodos","type","users","initialState","loading","message","loaded","store","createStore","state","action","map","todo","find","item","userId","id","filter","composeWithDevTools","Url","connect","dispatch","setSortField","startLoading","finishLoading","setLoaded","killTodo","useDispatch","loadTodosFromServer","fetch","then","response","json","className","role","onClick","completed","style","maxWidth","name","title","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1684faad.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Todo, User } from '../interface';\n\nexport const getSortedTodos: any = ({ todos, sortField }: any) => {\n  const sortedTodos = [...todos];\n\n  switch (sortField) {\n    case 'name':\n      sortedTodos.sort((a: any, b: any): any => a.user[sortField].localeCompare(b.user[sortField]));\n      break;\n\n    case 'title':\n      sortedTodos.sort((a: any, b: any): any => a[sortField].localeCompare(b[sortField]));\n      break;\n\n    case 'completed':\n      sortedTodos.sort((a: any, b: any): any => +a[sortField] - +b[sortField]);\n      break;\n\n    case 'id':\n      sortedTodos.sort((a: any, b: any): any => a[sortField] - b[sortField]);\n      break;\n\n    default:\n      break;\n  }\n\n  return sortedTodos;\n};\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SET_TODOS = 'SET_TODOS';\nconst IS_LOADED = 'IS_LOADED';\nconst SORT_BY = 'SORT_BY';\nconst KILL = 'KILL';\n\nexport const setTodos = ({ users, todos }: any) => ({\n  type: SET_TODOS,\n  users,\n  todos,\n});\n\nexport type RootState = {\n  loading: boolean;\n  message: string;\n  todos: Todo[];\n  loaded: boolean;\n  sortField: string;\n};\n\nconst initialState: RootState = {\n  loading: false,\n  message: '',\n  todos: [],\n  loaded: false,\n  sortField: 'id',\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, loading: true };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        message: action.message,\n      };\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.todos.map((todo: Todo) => ({\n          ...todo,\n          user: action.users.find((item: User) => todo.userId === item.id),\n        })),\n      };\n    case IS_LOADED:\n      return {\n        ...state,\n        loaded: true,\n      };\n    case SORT_BY:\n      return {\n        ...state,\n        sortField: action.sortField,\n      };\n    case KILL:\n      return {\n        ...state,\n        todos: state.todos.filter(item => action.id !== item.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","const Url = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api/';\n\nexport const getTodos = () => {\n  return fetch(`${Url}todos.json`).then(response => response.json());\n};\n\nexport const getUsers = () => {\n  return fetch(`${Url}users.json`).then(response => response.json());\n};\n","import React from 'react';\nimport { useDispatch, connect } from 'react-redux';\nimport './App.scss';\n\nimport { getTodos, getUsers } from './api';\nimport { getSortedTodos, setTodos } from './store';\n\n\nconst App = ({\n  loading,\n  message,\n  loaded,\n  startLoading,\n  finishLoading,\n  setLoaded,\n  sortedTodos,\n  setSortField,\n  killTodo,\n}: any) => {\n  const dispatch = useDispatch();\n\n  const loadTodosFromServer = async () => {\n    startLoading();\n    try {\n      const todos = await getTodos();\n      const users = await getUsers();\n\n      dispatch(setTodos({ todos, users }));\n      finishLoading();\n      setLoaded();\n    } catch (error) {\n      finishLoading();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      <h2>\n        {loading\n          ? (\n            <div className=\"spinner-border text-primary\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          )\n          : message}\n      </h2>\n\n      {loaded\n        && (\n          <>\n            <button\n              type=\"button\"\n              onClick={() => setSortField('title')}\n              className=\"btn btn-primary\"\n            >\n              sortBytitle\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => setSortField('name')}\n              className=\"btn btn-primary\"\n            >\n              sortByname\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => setSortField('completed')}\n              className=\"btn btn-primary\"\n            >\n              sortByCompleted\n            </button>\n          </>\n        )}\n\n      {!loaded\n        && (\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={loadTodosFromServer}\n          >\n            {loading ? 'Loading...' : 'Load'}\n          </button>\n        )}\n\n      {loaded && (\n        <ul>\n          {sortedTodos.map((item: any) => (\n            <div\n              className={item.completed\n                ? 'card text-white bg-success mb-3'\n                : 'card text-white bg-danger mb-3'}\n              style={{ maxWidth: '18rem' }}\n            >\n              <div className=\"card-header\">\n                {item.user.name}\n                <button type=\"button\" onClick={() => killTodo(item.id)}>X</button>\n              </div>\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{item.title}</h5>\n              </div>\n            </div>\n          ))}\n        </ul>\n      )}\n\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  loading: state.loading,\n  message: state.message,\n  sortedTodos: getSortedTodos(state),\n  loaded: state.loaded,\n  sortField: state.sortField,\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  setSortField: (sortField: string) => dispatch({ type: 'SORT_BY', sortField }),\n  startLoading: () => dispatch(\n    { type: 'START_LOADING' },\n  ),\n  finishLoading: (message: string) => dispatch({\n    type: 'FINISH_LOADING',\n    message,\n  }),\n  setLoaded: () => dispatch({ type: 'IS_LOADED' }),\n  killTodo: (id: number) => dispatch({ type: 'KILL', id }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}